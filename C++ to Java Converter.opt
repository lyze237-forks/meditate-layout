<options>
  <simple_options>
    <assign_array_defaults>true</assign_array_defaults>
    <assume_using_namespace_std_for_snippets>true</assume_using_namespace_std_for_snippets>
    <base_output_folder_structure_on_package_structure>false</base_output_folder_structure_on_package_structure>
    <bit_mask_unsigned_references>false</bit_mask_unsigned_references>
    <convert_bool_typedef_to_boolean>true</convert_bool_typedef_to_boolean>
    <convert_char_and_wchar_t_arrays_to_strings>true</convert_char_and_wchar_t_arrays_to_strings>
    <convert_char_and_wchar_t_pointers_to_strings>true</convert_char_and_wchar_t_pointers_to_strings>
    <convert_std.optional_to_wrapper_types>true</convert_std.optional_to_wrapper_types>
    <convert_true_false_macros_to_bool_literals>true</convert_true_false_macros_to_bool_literals>
    <copy_non_code_files_in_folder_conversion>false</copy_non_code_files_in_folder_conversion>
    <detect_copy_assignment_or_construction>true</detect_copy_assignment_or_construction>
    <expand_macros>true</expand_macros>
    <file_extensions>.cpp;.c;.cc;.cxx;.cppm;.hpp;.h;.hh;.hxx;.inc;.inl</file_extensions>
    <file_per_type>true</file_per_type>
    <generate_overloads_for_optional_parameters>true</generate_overloads_for_optional_parameters>
    <generic_type_inference>true</generic_type_inference>
    <include_commented_define_macros>true</include_commented_define_macros>
    <include_original_file_notes>true</include_original_file_notes>
    <keyword_renaming_suffix>true</keyword_renaming_suffix>
    <keyword_renaming_token>_Keyword</keyword_renaming_token>
    <lowercase_package_names>false</lowercase_package_names>
    <package_name_if_no_namespace>facebook.yoga</package_name_if_no_namespace>
    <renaming_suffix>true</renaming_suffix>
    <renaming_token>_Conflict</renaming_token>
    <unsigned_types_to_next_larger_signed_type>false</unsigned_types_to_next_larger_signed_type>
    <use_inferred_local_variable_typing>true</use_inferred_local_variable_typing>
    <use_java.util.optional>true</use_java.util.optional>
    <use_text_blocks>false</use_text_blocks>
  </simple_options>

  <include_folders>
  </include_folders>

  <bypassed_headers>
  </bypassed_headers>

  <added_system_headers>
  </added_system_headers>

  <function_replacements>
  </function_replacements>

  <string_replacements>
    <replacement>
      <find>YG_EXTERN_C_BEGIN</find>
      <replace>extern "C" {</replace>
      <active>true</active>
      <regex>false</regex>
      <match_case>false</match_case>
      <match_in_string_literals>false</match_in_string_literals>
      <match_in_comments>false</match_in_comments>
      <match_whole_word>false</match_whole_word>
      <post_conversion>false</post_conversion>
    </replacement>

    <replacement>
      <find>YG_EXTERN_C_END</find>
      <replace>}</replace>
      <active>true</active>
      <regex>false</regex>
      <match_case>false</match_case>
      <match_in_string_literals>false</match_in_string_literals>
      <match_in_comments>false</match_in_comments>
      <match_whole_word>false</match_whole_word>
      <post_conversion>true</post_conversion>
    </replacement>

    <replacement>
      <find>.copyFrom</find>
      <replace> = </replace>
      <active>true</active>
      <regex>false</regex>
      <match_case>false</match_case>
      <match_in_string_literals>false</match_in_string_literals>
      <match_in_comments>false</match_in_comments>
      <match_whole_word>false</match_whole_word>
      <post_conversion>true</post_conversion>
    </replacement>

    <replacement>
      <find>union {((?:.|\n)+?)} ([^ ]+)</find>
      <replace>typedef struct $2Struct {\n$1\n} $2Struct;\n\n$2Struct $2</replace>
      <active>true</active>
      <regex>true</regex>
      <match_case>false</match_case>
      <match_in_string_literals>false</match_in_string_literals>
      <match_in_comments>false</match_in_comments>
      <match_whole_word>false</match_whole_word>
      <post_conversion>false</post_conversion>
    </replacement>

    <replacement>
      <find>union ([^ {]+) {</find>
      <replace>struct $1 {</replace>
      <active>true</active>
      <regex>true</regex>
      <match_case>false</match_case>
      <match_in_string_literals>false</match_in_string_literals>
      <match_in_comments>false</match_in_comments>
      <match_whole_word>false</match_whole_word>
      <post_conversion>false</post_conversion>
    </replacement>

    <replacement>
      <find>const noexcept</find>
      <replace></replace>
      <active>true</active>
      <regex>false</regex>
      <match_case>false</match_case>
      <match_in_string_literals>false</match_in_string_literals>
      <match_in_comments>false</match_in_comments>
      <match_whole_word>false</match_whole_word>
      <post_conversion>false</post_conversion>
    </replacement>

    <replacement>
      <find>noexcept</find>
      <replace></replace>
      <active>true</active>
      <regex>false</regex>
      <match_case>false</match_case>
      <match_in_string_literals>false</match_in_string_literals>
      <match_in_comments>false</match_in_comments>
      <match_whole_word>false</match_whole_word>
      <post_conversion>false</post_conversion>
    </replacement>

    <replacement>
      <find>(size_t|uint32_t)</find>
      <replace>Integer</replace>
      <active>true</active>
      <regex>true</regex>
      <match_case>false</match_case>
      <match_in_string_literals>false</match_in_string_literals>
      <match_in_comments>false</match_in_comments>
      <match_whole_word>false</match_whole_word>
      <post_conversion>true</post_conversion>
    </replacement>

    <replacement>
      <find>new Integer(</find>
      <replace>(</replace>
      <active>true</active>
      <regex>false</regex>
      <match_case>false</match_case>
      <match_in_string_literals>false</match_in_string_literals>
      <match_in_comments>false</match_in_comments>
      <match_whole_word>false</match_whole_word>
      <post_conversion>true</post_conversion>
    </replacement>

    <replacement>
      <find>([^{ ]+){([^}]*)}</find>
      <replace>$1($2)</replace>
      <active>true</active>
      <regex>true</regex>
      <match_case>false</match_case>
      <match_in_string_literals>false</match_in_string_literals>
      <match_in_comments>false</match_in_comments>
      <match_whole_word>false</match_whole_word>
      <post_conversion>true</post_conversion>
    </replacement>

    <replacement>
      <find>__attribute__((visibility("default"))) </find>
      <replace></replace>
      <active>true</active>
      <regex>false</regex>
      <match_case>false</match_case>
      <match_in_string_literals>false</match_in_string_literals>
      <match_in_comments>false</match_in_comments>
      <match_whole_word>false</match_whole_word>
      <post_conversion>false</post_conversion>
    </replacement>
  </string_replacements>

  <type_replacements>
    <type>
      <original_type>uint32_t</original_type>
      <replacement_type>Integer</replacement_type>
      <members>
      </members>
    </type>

    <type>
      <original_type>uint8_t</original_type>
      <replacement_type>Byte</replacement_type>
      <members>
      </members>
    </type>

    <type>
      <original_type>size_t</original_type>
      <replacement_type>Integer</replacement_type>
      <members>
      </members>
    </type>
  </type_replacements>
</options>